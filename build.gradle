buildscript {
    ext.kotlin_version = "1.6.10"
    ext.ktor_version = "1.6.8"

    repositories {
        maven { url("https://repo1.maven.org/maven2") }
        maven { url("https://plugins.gradle.org/m2") }
    }

    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:6.1.0"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

/* We can't use `plugins` block here because of the multi-root setup, since the `plugins` block doesn't allow
 * specifying a plugin more than once throughout the whole project. */
apply plugin: "kotlin"
apply plugin: "com.github.johnrengelman.shadow"

if (rootProject == project) {
    repositories {
        maven { url("https://repo1.maven.org/maven2") }
        maven { url("https://plugins.gradle.org/m2") }
    }
}

sourceCompatibility = 11
targetCompatibility = sourceCompatibility
compileKotlin { kotlinOptions.jvmTarget = sourceCompatibility }
compileTestKotlin { kotlinOptions.jvmTarget = sourceCompatibility }

project(":bioinf-commons")

dependencies {
    compile project(":bioinf-commons")

    // Kotlin dependencies
    implementation("org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version")
    implementation("org.jetbrains.kotlin:kotlin-reflect:$kotlin_version")
    implementation("org.jetbrains.kotlinx:kotlinx-support-jdk8:0.1")

    // Server: Ktor dependencies
    implementation("io.ktor:ktor-server-netty:$ktor_version")
    implementation("io.ktor:ktor-jackson:$ktor_version")

    // Logging dependencies
    implementation("ch.qos.logback:logback-classic:1.4.12")
    implementation("ch.qos.logback:logback-core:1.4.12")

    //ML dependencies
    implementation("nz.ac.waikato.cms.weka:weka-stable:3.8.6")

    // Bioinformatics (science) dependencies
    implementation project(":bioinf-commons")
    implementation("org.nield:kotlin-statistics:1.2.1")
    implementation("org.apache.commons:commons-math3:3.6.1")

    // Testing dependencies
    testImplementation("junit:junit:4.13.2")
    testImplementation("org.jetbrains.kotlin:kotlin-test:$kotlin_version")
}

tasks.withType(Test) {
    // Continue execution even if tests for some of the sub-projects failed.
    ignoreFailures = true
    maxParallelForks = Runtime.runtime.availableProcessors()
    maxHeapSize = "1024m"

    testLogging.showStandardStreams = true

    systemProperty "teamcity.build.checkoutDir", System.getProperty("teamcity.build.checkoutDir")
}

test {
    include "**/*Test.class"
}

task sourcesJar(type: Jar) {
    classifier = "sources"
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

shadowJar {
    // File name: "$baseName-$version-$classifier.jar"
    baseName = "fishbone"
    version = "${version}.${project.buildCounter}"
    classifier = ""
    minimize {
        // kotlin.jvm.KotlinReflectionNotSupportedError: Kotlin reflection implementation is not found at runtime. Make sure you have kotlin-reflect.jar in the classpath
        exclude(dependency("org.jetbrains.kotlin:.*"))
        // ch.qos.logback.core.util.DynamicClassLoadingException: Failed to instantiate type ch.qos.logback.core.rolling.RollingFileAppender
        exclude(dependency("org.slf4j:.*"))
        // java.lang.NoClassDefFoundError: com/fasterxml/jackson/dataformat/yaml/YAMLFactory
        exclude(dependency("com.fasterxml.jackson.dataformat:.*"))
        // java.lang.NoClassDefFoundError: org/yaml/snakeyaml/error/YAMLException
        exclude(dependency("org.yaml:.*"))
    }
    manifest {
        attributes "Main-Class": "org.jetbrains.bio.fishbone.FishboneApp"
    }
    zip64 true
}

jar {
    manifest {
        attributes provider: "gradle"
        attributes "Application-Name": "Fishbone $version"
        attributes "Built-By": "JetBrains Research TeamCity"
    }
}

// https://github.com/gradle/gradle/issues/5816
if (rootProject == project) {
    wrapper {
        gradleVersion = "6.8"
    }
}
