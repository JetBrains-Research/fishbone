buildscript {
    ext.kotlin_version = "2.2.0"
    ext.ktor_version = "2.3.7"

    repositories {
        maven { url("https://repo1.maven.org/maven2") }
        maven { url("https://plugins.gradle.org/m2") }
        maven { url("https://jitpack.io") }
    }

    dependencies {
        classpath "gradle.plugin.com.github.johnrengelman:shadow:7.1.2"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

/* We can't use `plugins` block here because of the multi-root setup, since the `plugins` block doesn't allow
 * specifying a plugin more than once throughout the whole project. */
apply plugin: "application"
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "kotlin"

application {
    mainClass.set("org.jetbrains.bio.fishbone.FishboneApp")
}

sourceCompatibility = 21
targetCompatibility = sourceCompatibility
compileKotlin { kotlinOptions.jvmTarget = sourceCompatibility }
compileTestKotlin { kotlinOptions.jvmTarget = sourceCompatibility }

if (rootProject == project) {
    repositories {
        maven { url("https://repo1.maven.org/maven2") }
        maven { url("https://plugins.gradle.org/m2") }
    }
}

project(":bioinf-commons")

dependencies {
    // Kotlin dependencies
    implementation("org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version")
    implementation("org.jetbrains.kotlin:kotlin-reflect:$kotlin_version")

    // Server: Ktor dependencies
    implementation("io.ktor:ktor-client-core:${ktor_version}")
    implementation("io.ktor:ktor-client-core-jvm:${ktor_version}")
    implementation("io.ktor:ktor-client-cio:${ktor_version}")
    implementation("io.ktor:ktor-client-cio-jvm:${ktor_version}")
    implementation("io.ktor:ktor-client-encoding:${ktor_version}")
    implementation("io.ktor:ktor-client-encoding-jvm:${ktor_version}")
    implementation("io.ktor:ktor-http:${ktor_version}")
    implementation("io.ktor:ktor-http-jvm:${ktor_version}")
    implementation("io.ktor:ktor-server-netty:$ktor_version")
    implementation("io.ktor:ktor-server-core:$ktor_version")
    implementation("io.ktor:ktor-server-content-negotiation:$ktor_version")
    implementation("io.ktor:ktor-serialization-jackson:$ktor_version")
    implementation("io.ktor:ktor-server-cors:$ktor_version")
    implementation("io.ktor:ktor-server-status-pages:$ktor_version")
    implementation("io.ktor:ktor-server-resources:$ktor_version")
    implementation("io.ktor:ktor-server-call-logging:$ktor_version")

    // Logging dependencies
    implementation("ch.qos.logback:logback-classic:1.4.12")
    implementation("ch.qos.logback:logback-core:1.4.12")

    //ML dependencies
    implementation("nz.ac.waikato.cms.weka:weka-stable:3.8.6")

    // Command line
    implementation("net.sf.jopt-simple:jopt-simple:5.0.4")

    // Utility
    implementation("net.sf.trove4j:trove4j:3.0.3")
    implementation("com.google.guava:guava:32.0.1-jre")
    implementation("org.apache.commons:commons-csv:1.10.0")
    implementation("com.google.code.gson:gson:2.10.1")
    implementation("net.sf.jopt-simple:jopt-simple:5.0.4")

    // Bioinformatics (science) dependencies
    implementation project(":bioinf-commons")

    implementation("org.nield:kotlin-statistics:1.2.1")
    implementation("org.apache.commons:commons-math3:3.6.1")

    // Testing dependencies
    testImplementation("junit:junit:4.13.2")
    testImplementation("org.jetbrains.kotlin:kotlin-test:$kotlin_version")
}

private String settingsFolder(final String propertyName, final String folderName) {
    if (!System.hasProperty(propertyName)) {
        return "${rootProject.buildDir}/.tests/$folderName"
    } else {
        return System.getProperty(propertyName)
    }
}

test {
    dependsOn ":bioinf-commons:generateTestOrganism"
    dependsOn ":bioinf-commons:test"

    include "**/*Test.class"

    ignoreFailures = true
    maxParallelForks = Runtime.runtime.availableProcessors()
    maxHeapSize = "1024m"

    testLogging.showStandardStreams = true

    // Add JVM options for Vector API
    jvmArgs '--add-modules', 'jdk.incubator.vector'

    systemProperty "genomes.path", settingsFolder("genomes.path", "genomes")
    systemProperty "experiments.path", settingsFolder("experiments.path", "experiments")
    systemProperty "raw.data.path", settingsFolder("experiments.path", "rawdata")
    systemProperty "caches.path", settingsFolder("genomes.path", "caches")
    systemProperty "logs.path", settingsFolder("experiments.path", "logs")

    systemProperty "teamcity.build.checkoutDir", System.getProperty("teamcity.build.checkoutDir")
}

test {
    include "**/*Test.class"
}

task sourcesJar(type: Jar) {
    archiveClassifier = "sources"
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

shadowJar {
    // File name: "$archiveBaseName-$archiveVersion-$archiveClassifier.jar"
    archiveBaseName = "fishbone"
    archiveVersion = "${version}.${project.buildCounter}"
    archiveClassifier = ""

    manifest {
        attributes "Main-Class": "org.jetbrains.bio.fishbone.FishboneApp"
    }
    zip64 true
}

jar {
    manifest {
        attributes provider: "gradle"
        attributes "Application-Name": "Fishbone $version"
        attributes "Built-By": "JetBrains Research TeamCity"
    }
}

// https://github.com/gradle/gradle/issues/5816
if (rootProject == project) {
    wrapper {
        gradleVersion = "8.5"
    }
}
